import { GetStaticProps, NextPage } from "next";
import { useRouter } from "next/router";
import Menu from "@component/components/Menu/Menu";
import Head from "next/head";
import { GetServerSideProps } from "next";
// import url from "url";
// import patreonAPI, { oauth as patreonOAuth } from "patreon";
import { useEffect, useState } from "react";

import { NextApiRequest, NextApiResponse } from "next";
// import patreonAPI, { oauth as patreonOAuth } from 'patreon';
import url from "url";
import { patreon, oauth as patreonOAuth } from "patreon";

export async function fetchPatreonUserInfo(
  patreonOAuthClient,
  oauthGrantCode,
  url
) {
  try {
    //////////version that fetches user info
    const tokensResponse = await patreonOAuthClient.getTokens(
      oauthGrantCode,
      url
    );
    console.log("tokensResponse: ", tokensResponse);
    const patreonAPIClient = patreon(tokensResponse.access_token);

    console.log("patreonAPIClient: ", patreonAPIClient);

    ////this is where things go south
    const userResponse = await patreonAPIClient("/current_user");

    console.log("userResponse: ", userResponse);

    ///////version that fetches my campaign info:
    const patreonAPIClientCreator = patreon(
      process.env.PATREON_CREATOR_ACCESS_TOKEN
    );
    console.log("patreonAPIClient: ", patreonAPIClientCreator);
    const creatorResponse = await patreonAPIClientCreator(
      "/campaigns/11012516/pledges?include=patron.null"
    );
    console.log("userResponse : ", creatorResponse);
    console.log(
      "userResponse store graph pledge: ",
      creatorResponse.store.graph.pledge
    );

    const allPledges = creatorResponse.store.graph.pledge;

    const pledgeIds = Object.keys(allPledges);

    const subscriberEmailArray = pledgeIds.map((element) => {
      return allPledges[element].patron.email;
    });

    console.log("subscriberEmailArray: ", subscriberEmailArray);

    //////this return is a hopeful future return statement copied from elsewhere
    if (userResponse) {
      return userResponse.store.findAll("user").map((user) => user.serialize());
    }
  } catch (error) {
    console.error("error!", error);
    throw error;
  }
}

interface PatreonProps {
  userInfo: any;
}

const PatreonSI: NextPage<PatreonProps> = ({ userInfo }) => {
  // const router = useRouter();
  // const { query } = router;
  // const code = query.code;
  // console.log("code in patreon-si", code);
  // console.log("query in patreon-si");

  // const [userInfo, setUserInfo] = useState(null);

  // const handleOAuthRedirectRequest = async () => {
  //   try {
  //     const response = await fetch(`http://127.0.0.1:3000/api/patreon-auth`, {
  //       method: "POST",
  //       headers: {
  //         "Content-Type": "application/x-www-form-urlencoded",
  //       },
  //       body: JSON.stringify({ code }),
  //     });

  //     console.log("response: ", response);

  //     if (response.ok) {
  //       const data = await response.json();
  //       setUserInfo(data.user);
  //     } else {
  //       console.error("Error fetching user profile:", response.status);
  //     }
  //   } catch (error) {
  //     console.error("Error fetching user profile:", error);
  //   }
  // };

  // handleOAuthRedirectRequest();

  useEffect(() => {
    console.log("New User Info! ", userInfo);
  }, [userInfo]);

  return (
    <>
      <Head>
        <title>Patreon ~ Act. Sing. Dance. Repeat.</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="min-h-screen bg-cyan-50 text-cyan-950 opacity-80">
          <Menu />
          <div className="flex flex-col items-center justify-center">
            <h1 className="p-10 text-3xl font-bold">Patreon Page</h1>
            <div>User profile info is logged in the console</div>
          </div>
        </div>
      </main>
    </>
  );
};

export default PatreonSI;

// const router = useRouter();
// const { query } = router;
// const code = query.code;

export const getServerSideProps: GetServerSideProps = async (context) => {
  console.log("context: ", context);
  const { query } = context;
  console.log("query: ", query);
  const code = query?.code || "nada";
  console.log("code: ", code);

  const CLIENT_ID = process.env.PATREON_CLIENT_ID; // Replace with your client ID
  const CLIENT_SECRET = process.env.PATREON_CLIENT_SECRET; // Replace with your client secret
  // const REDIRECT_URL = 'http://127.0.0.1:3000/api/patreon-auth'; // Replace with your redirect URL
  const REDIRECT_URL = "http://127.0.0.1:3000/patreon-si"; // Replace with your redirect URL

  // const patreonAPI = patreon.patreon
  // var patreonOAuth = patreon.oauth

  console.log("client secret", CLIENT_SECRET);
  console.log("client id", CLIENT_ID);
  const patreonOAuthClient = patreonOAuth(CLIENT_ID, CLIENT_SECRET);

  try {
    const userInfo = await fetchPatreonUserInfo(
      patreonOAuthClient,
      code,
      REDIRECT_URL
    );

    return {
      props: {
        userInfo,
      },
    };
  } catch (error) {
    console.error("Error fetching user profile:", error);

    return {
      props: {
        userInfo: null, // or handle the error as needed
      },
    };
  }
};
