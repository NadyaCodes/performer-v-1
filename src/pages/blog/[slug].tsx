import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Menu from "@component/components/Menu/Menu";
import BlogPageComponent from "@component/components/Blog/BlogPageComponent";
import { Post } from "@prisma/client";
import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();
import { useState, useEffect } from "react";

export type BlogPageProps = {
  postData: Post;
};

const BlogPage: NextPage<BlogPageProps> = ({ postData }) => {
  const [createdAtDate, setCreatedAtDate] = useState<Date | null>(null);

  useEffect(() => {
    if (postData) {
      const createdAt = new Date(postData.createdAt);
      setCreatedAtDate(createdAt);
    }
  }, [postData]);

  return (
    <>
      <Head>
        <title>{postData?.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="min-h-screen bg-cyan-50 bg-opacity-80">
          <Menu />
          {postData && (
            <BlogPageComponent post={postData} date={createdAtDate} />
          )}
        </div>
      </main>
    </>
  );
};

const createPaths = async (): Promise<Array<any>> => {
  const allPosts = await prisma.post.findMany();

  const postSlugArray = allPosts.map((post) => {
    return { params: { slug: post.slug } };
  });

  return postSlugArray;
};

export async function getStaticPaths() {
  const paths = await createPaths();
  return {
    paths,
    fallback: false,
  };
}

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const postUrl = params?.slug as string;
  const postData = await prisma.post.findFirst({ where: { slug: postUrl } });
  const createdAt = postData?.createdAt.toISOString() || "";

  return {
    props: {
      postData: {
        ...postData,
        createdAt,
      },
    },
  };
};

export default BlogPage;
