// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma migrate dev --name [name]
//npx prisma generate

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    string    String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String          @id @default(cuid())
    name            String?
    email           String?         @unique
    emailVerified   DateTime?
    image           String?
    patreonMemberId String?
    accounts        Account[]
    sessions        Session[]
    favPrograms     FavProgram[]
    Note            Note[]
    CustomProgram   CustomProgram[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model School {
    id             String           @id @default(cuid())
    name           String
    SchoolLocation SchoolLocation[]
}

model Location {
    id             String           @id @default(cuid())
    city           String
    province       String
    area           String?
    SchoolLocation SchoolLocation[]
}

model SchoolLocation {
    id         String      @id @default(cuid())
    schoolId   String
    school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    locationId String
    location   Location    @relation(fields: [locationId], references: [id], onDelete: Cascade)
    website    String
    PTProgram  PTProgram[]
    FTProgram  FTProgram[]
}

model PTProgram {
    id               String         @id @default(cuid())
    schoolLocationId String
    SchoolLocation   SchoolLocation @relation(fields: [schoolLocationId], references: [id], onDelete: Cascade)
    website          String
    discipline       String
    favPrograms      FavProgram[]
}

model FTProgram {
    id               String         @id @default(cuid())
    schoolLocationId String
    SchoolLocation   SchoolLocation @relation(fields: [schoolLocationId], references: [id], onDelete: Cascade)
    website          String
    discipline       String
    name             String
    favPrograms      FavProgram[]
}

model FavProgram {
    id          String     @id @default(cuid())
    userId      String
    User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    ftProgramId String?
    FTProgram   FTProgram? @relation(fields: [ftProgramId], references: [id], onDelete: Cascade)
    ptProgramId String?
    PTProgram   PTProgram? @relation(fields: [ptProgramId], references: [id], onDelete: Cascade)
    Note        Note[]
}

model Note {
    id              String         @id @default(cuid())
    favProgramId    String?
    FavProgram      FavProgram?    @relation(fields: [favProgramId], references: [id], onDelete: Cascade)
    User            User           @relation(fields: [userId], references: [id])
    userId          String
    text            String
    customProgramId String?
    CustomProgram   CustomProgram? @relation(fields: [customProgramId], references: [id], onDelete: Cascade)
    dateTime        DateTime       @default(now())
}

model CustomProgram {
    id              String   @id @default(cuid())
    name            String?
    school          String?
    city            String?
    province        String?
    country         String?
    website         String?
    typePt          Boolean?
    typeFt          Boolean?
    disciplineAct   Boolean?
    disciplineSing  Boolean?
    disciplineDance Boolean?
    disciplineMT    Boolean?
    Note            Note[]
    User            User     @relation(fields: [userId], references: [id])
    userId          String
}

model Post {
    id        String   @id @default(cuid())
    author    String
    slug      String
    title     String
    body      String
    createdAt DateTime @default(now())
    image     String
}
